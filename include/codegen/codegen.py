# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_codegen')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_codegen')
    _codegen = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_codegen', [dirname(__file__)])
        except ImportError:
            import _codegen
            return _codegen
        try:
            _mod = imp.load_module('_codegen', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _codegen = swig_import_helper()
    del swig_import_helper
else:
    import _codegen
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codegen.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _codegen.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _codegen.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _codegen.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _codegen.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _codegen.SwigPyIterator_equal(self, x)

    def copy(self):
        return _codegen.SwigPyIterator_copy(self)

    def next(self):
        return _codegen.SwigPyIterator_next(self)

    def __next__(self):
        return _codegen.SwigPyIterator___next__(self)

    def previous(self):
        return _codegen.SwigPyIterator_previous(self)

    def advance(self, n):
        return _codegen.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _codegen.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _codegen.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _codegen.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _codegen.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _codegen.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _codegen.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _codegen.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class UnsignedVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _codegen.UnsignedVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _codegen.UnsignedVector___nonzero__(self)

    def __bool__(self):
        return _codegen.UnsignedVector___bool__(self)

    def __len__(self):
        return _codegen.UnsignedVector___len__(self)

    def __getslice__(self, i, j):
        return _codegen.UnsignedVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _codegen.UnsignedVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _codegen.UnsignedVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _codegen.UnsignedVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _codegen.UnsignedVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _codegen.UnsignedVector___setitem__(self, *args)

    def pop(self):
        return _codegen.UnsignedVector_pop(self)

    def append(self, x):
        return _codegen.UnsignedVector_append(self, x)

    def empty(self):
        return _codegen.UnsignedVector_empty(self)

    def size(self):
        return _codegen.UnsignedVector_size(self)

    def swap(self, v):
        return _codegen.UnsignedVector_swap(self, v)

    def begin(self):
        return _codegen.UnsignedVector_begin(self)

    def end(self):
        return _codegen.UnsignedVector_end(self)

    def rbegin(self):
        return _codegen.UnsignedVector_rbegin(self)

    def rend(self):
        return _codegen.UnsignedVector_rend(self)

    def clear(self):
        return _codegen.UnsignedVector_clear(self)

    def get_allocator(self):
        return _codegen.UnsignedVector_get_allocator(self)

    def pop_back(self):
        return _codegen.UnsignedVector_pop_back(self)

    def erase(self, *args):
        return _codegen.UnsignedVector_erase(self, *args)

    def __init__(self, *args):
        this = _codegen.new_UnsignedVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _codegen.UnsignedVector_push_back(self, x)

    def front(self):
        return _codegen.UnsignedVector_front(self)

    def back(self):
        return _codegen.UnsignedVector_back(self)

    def assign(self, n, x):
        return _codegen.UnsignedVector_assign(self, n, x)

    def resize(self, *args):
        return _codegen.UnsignedVector_resize(self, *args)

    def insert(self, *args):
        return _codegen.UnsignedVector_insert(self, *args)

    def reserve(self, n):
        return _codegen.UnsignedVector_reserve(self, n)

    def capacity(self):
        return _codegen.UnsignedVector_capacity(self)
    __swig_destroy__ = _codegen.delete_UnsignedVector
    __del__ = lambda self: None
UnsignedVector_swigregister = _codegen.UnsignedVector_swigregister
UnsignedVector_swigregister(UnsignedVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _codegen.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _codegen.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _codegen.DoubleVector___bool__(self)

    def __len__(self):
        return _codegen.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _codegen.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _codegen.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _codegen.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _codegen.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _codegen.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _codegen.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _codegen.DoubleVector_pop(self)

    def append(self, x):
        return _codegen.DoubleVector_append(self, x)

    def empty(self):
        return _codegen.DoubleVector_empty(self)

    def size(self):
        return _codegen.DoubleVector_size(self)

    def swap(self, v):
        return _codegen.DoubleVector_swap(self, v)

    def begin(self):
        return _codegen.DoubleVector_begin(self)

    def end(self):
        return _codegen.DoubleVector_end(self)

    def rbegin(self):
        return _codegen.DoubleVector_rbegin(self)

    def rend(self):
        return _codegen.DoubleVector_rend(self)

    def clear(self):
        return _codegen.DoubleVector_clear(self)

    def get_allocator(self):
        return _codegen.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _codegen.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _codegen.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _codegen.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _codegen.DoubleVector_push_back(self, x)

    def front(self):
        return _codegen.DoubleVector_front(self)

    def back(self):
        return _codegen.DoubleVector_back(self)

    def assign(self, n, x):
        return _codegen.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _codegen.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _codegen.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _codegen.DoubleVector_reserve(self, n)

    def capacity(self):
        return _codegen.DoubleVector_capacity(self)
    __swig_destroy__ = _codegen.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _codegen.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class Ex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ex, name)

    def __init__(self, *args):
        this = _codegen.new_Ex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _codegen.delete_Ex
    __del__ = lambda self: None

    def to_string(self):
        return _codegen.Ex_to_string(self)

    def graphviz_repr(self):
        return _codegen.Ex_graphviz_repr(self)

    def is_a_symbol(self):
        return _codegen.Ex_is_a_symbol(self)

    def is_a_number(self):
        return _codegen.Ex_is_a_number(self)

    def get_val(self):
        return _codegen.Ex_get_val(self)

    def set_val(self, v):
        return _codegen.Ex_set_val(self, v)

    def is_a_function_1(self):
        return _codegen.Ex_is_a_function_1(self)

    def is_a_function_2(self):
        return _codegen.Ex_is_a_function_2(self)

    def display_graphviz(self, *args):
        return _codegen.Ex_display_graphviz(self, *args)

    def find_discontinuity(self, v):
        return _codegen.Ex_find_discontinuity(self, v)

    def depends_on(self, ex):
        return _codegen.Ex_depends_on(self, ex)

    def is_zero(self):
        return _codegen.Ex_is_zero(self)

    def subs_with_test(self, *args):
        return _codegen.Ex_subs_with_test(self, *args)

    def diff(self, a):
        return _codegen.Ex_diff(self, a)

    def nb_children(self):
        return _codegen.Ex_nb_children(self)

    def child(self, i):
        return _codegen.Ex_child(self, i)

    def nb_parents(self):
        return _codegen.Ex_nb_parents(self)

    def parent(self, i):
        return _codegen.Ex_parent(self, i)

    def id(self):
        return _codegen.Ex_id(self)

    def __add__(self, *args):
        return _codegen.Ex___add__(self, *args)

    def __radd__(self, other):
        return _codegen.Ex___radd__(self, other)

    def __sub__(self, *args):
        return _codegen.Ex___sub__(self, *args)

    def __rsub__(self, other):
        return _codegen.Ex___rsub__(self, other)

    def __mul__(self, *args):
        return _codegen.Ex___mul__(self, *args)

    def __rmul__(self, other):
        return _codegen.Ex___rmul__(self, other)

    def __div__(self, *args):
        return _codegen.Ex___div__(self, *args)

    def __rdiv__(self, other):
        return _codegen.Ex___rdiv__(self, other)

    def __pow__(self, *args):
        return _codegen.Ex___pow__(self, *args)

    def __rpow__(self, other):
        return _codegen.Ex___rpow__(self, other)

    def __neg__(self):
        return _codegen.Ex___neg__(self)

    def __abs__(self):
        return _codegen.Ex___abs__(self)

    def __nonzero__(self):
        return _codegen.Ex___nonzero__(self)

    def __repr__(self):
        return _codegen.Ex___repr__(self)

    def __str__(self):
        return _codegen.Ex___str__(self)

    def subs(self, *args):
        return _codegen.Ex_subs(self, *args)
Ex_swigregister = _codegen.Ex_swigregister
Ex_swigregister(Ex)


def symbol(name, texname=None):
    return _codegen.symbol(name, texname)
symbol = _codegen.symbol

def number(*args):
    return _codegen.number(*args)
number = _codegen.number

def dirac(*args):
    return _codegen.dirac(*args)
dirac = _codegen.dirac

def atan2(*args):
    return _codegen.atan2(*args)
atan2 = _codegen.atan2

def integration(expr, v, beg, end, max_poly_order=5):
    return _codegen.integration(expr, v, beg, end, max_poly_order)
integration = _codegen.integration
class EM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EM, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _codegen.EM_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _codegen.EM___nonzero__(self)

    def __bool__(self):
        return _codegen.EM___bool__(self)

    def __len__(self):
        return _codegen.EM___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _codegen.EM___getitem__(self, key)

    def __delitem__(self, key):
        return _codegen.EM___delitem__(self, key)

    def has_key(self, key):
        return _codegen.EM_has_key(self, key)

    def keys(self):
        return _codegen.EM_keys(self)

    def values(self):
        return _codegen.EM_values(self)

    def items(self):
        return _codegen.EM_items(self)

    def __contains__(self, key):
        return _codegen.EM___contains__(self, key)

    def key_iterator(self):
        return _codegen.EM_key_iterator(self)

    def value_iterator(self):
        return _codegen.EM_value_iterator(self)

    def __setitem__(self, *args):
        return _codegen.EM___setitem__(self, *args)

    def asdict(self):
        return _codegen.EM_asdict(self)

    def __init__(self, *args):
        this = _codegen.new_EM(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _codegen.EM_empty(self)

    def size(self):
        return _codegen.EM_size(self)

    def swap(self, v):
        return _codegen.EM_swap(self, v)

    def begin(self):
        return _codegen.EM_begin(self)

    def end(self):
        return _codegen.EM_end(self)

    def rbegin(self):
        return _codegen.EM_rbegin(self)

    def rend(self):
        return _codegen.EM_rend(self)

    def clear(self):
        return _codegen.EM_clear(self)

    def get_allocator(self):
        return _codegen.EM_get_allocator(self)

    def count(self, x):
        return _codegen.EM_count(self, x)

    def erase(self, *args):
        return _codegen.EM_erase(self, *args)

    def find(self, x):
        return _codegen.EM_find(self, x)

    def lower_bound(self, x):
        return _codegen.EM_lower_bound(self, x)

    def upper_bound(self, x):
        return _codegen.EM_upper_bound(self, x)
    __swig_destroy__ = _codegen.delete_EM
    __del__ = lambda self: None
EM_swigregister = _codegen.EM_swigregister
EM_swigregister(EM)

class PEX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PEX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PEX, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _codegen.new_PEX(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _codegen.PEX_first_set
    __swig_getmethods__["first"] = _codegen.PEX_first_get
    if _newclass:
        first = _swig_property(_codegen.PEX_first_get, _codegen.PEX_first_set)
    __swig_setmethods__["second"] = _codegen.PEX_second_set
    __swig_getmethods__["second"] = _codegen.PEX_second_get
    if _newclass:
        second = _swig_property(_codegen.PEX_second_get, _codegen.PEX_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _codegen.delete_PEX
    __del__ = lambda self: None
PEX_swigregister = _codegen.PEX_swigregister
PEX_swigregister(PEX)

class ExVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExVector, name)

    def __init__(self, *args):
        this = _codegen.new_ExVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, ex):
        return _codegen.ExVector_push_back(self, ex)

    def resize(self, s):
        return _codegen.ExVector_resize(self, s)

    def size(self):
        return _codegen.ExVector_size(self)

    def to_string(self):
        return _codegen.ExVector_to_string(self)

    def graphviz_repr(self):
        return _codegen.ExVector_graphviz_repr(self)

    def is_null(self):
        return _codegen.ExVector_is_null(self)

    def diff(self, a):
        return _codegen.ExVector_diff(self, a)

    def max(self):
        return _codegen.ExVector_max(self)

    def sum(self):
        return _codegen.ExVector_sum(self)

    def __getitem__(self, i):
        return _codegen.ExVector___getitem__(self, i)

    def __setitem__(self, *args):
        return _codegen.ExVector___setitem__(self, *args)

    def __add__(self, *args):
        return _codegen.ExVector___add__(self, *args)

    def __radd__(self, other):
        return _codegen.ExVector___radd__(self, other)

    def __sub__(self, *args):
        return _codegen.ExVector___sub__(self, *args)

    def __rsub__(self, other):
        return _codegen.ExVector___rsub__(self, other)

    def __mul__(self, *args):
        return _codegen.ExVector___mul__(self, *args)

    def __rmul__(self, *args):
        return _codegen.ExVector___rmul__(self, *args)

    def __div__(self, *args):
        return _codegen.ExVector___div__(self, *args)

    def __rdiv__(self, *args):
        return _codegen.ExVector___rdiv__(self, *args)

    def __pow__(self, *args):
        return _codegen.ExVector___pow__(self, *args)

    def __rpow__(self, other):
        return _codegen.ExVector___rpow__(self, other)

    def __neg__(self):
        return _codegen.ExVector___neg__(self)

    def __abs__(self):
        return _codegen.ExVector___abs__(self)

    def __copy__(self):
        return _codegen.ExVector___copy__(self)

    def clone(self):
        return _codegen.ExVector_clone(self)

    def __repr__(self):
        return _codegen.ExVector___repr__(self)

    def __str__(self):
        return _codegen.ExVector___str__(self)

    def subs(self, *args):
        return _codegen.ExVector_subs(self, *args)
    __swig_destroy__ = _codegen.delete_ExVector
    __del__ = lambda self: None
ExVector_swigregister = _codegen.ExVector_swigregister
ExVector_swigregister(ExVector)


def sqrt(*args):
    return _codegen.sqrt(*args)
sqrt = _codegen.sqrt

def exp(*args):
    return _codegen.exp(*args)
exp = _codegen.exp

def pos_part(a):
    return _codegen.pos_part(a)
pos_part = _codegen.pos_part

def neg_part(a):
    return _codegen.neg_part(a)
neg_part = _codegen.neg_part

def mini(*args):
    return _codegen.mini(*args)
mini = _codegen.mini

def norm(a, additional_val=0.0):
    return _codegen.norm(a, additional_val)
norm = _codegen.norm

def vect_prod(v1, v2):
    return _codegen.vect_prod(v1, v2)
vect_prod = _codegen.vect_prod
class ExMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExMatrix, name)

    def __init__(self, nb_rows=0, nb_cols=0):
        this = _codegen.new_ExMatrix(nb_rows, nb_cols)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def copy(self):
        return _codegen.ExMatrix_copy(self)

    def __call__(self, *args):
        return _codegen.ExMatrix___call__(self, *args)

    def nb_rows(self):
        return _codegen.ExMatrix_nb_rows(self)

    def nb_cols(self):
        return _codegen.ExMatrix_nb_cols(self)

    def to_string(self, nb_spaces=0):
        return _codegen.ExMatrix_to_string(self, nb_spaces)

    def graphviz_repr(self):
        return _codegen.ExMatrix_graphviz_repr(self)

    def is_null(self):
        return _codegen.ExMatrix_is_null(self)

    def depends_on(self, ex):
        return _codegen.ExMatrix_depends_on(self, ex)

    def diff(self, a):
        return _codegen.ExMatrix_diff(self, a)

    def resize(self, r, c):
        return _codegen.ExMatrix_resize(self, r, c)

    def max(self):
        return _codegen.ExMatrix_max(self)

    def trace(self):
        return _codegen.ExMatrix_trace(self)

    def transpose(self):
        return _codegen.ExMatrix_transpose(self)

    def determinant(self):
        return _codegen.ExMatrix_determinant(self)

    def ldl(self):
        return _codegen.ExMatrix_ldl(self)

    def solve_using_ldl(self, b):
        return _codegen.ExMatrix_solve_using_ldl(self, b)

    def solve(self, *args):
        return _codegen.ExMatrix_solve(self, *args)

    def solve_regular_or_not(self, v):
        return _codegen.ExMatrix_solve_regular_or_not(self, v)

    def solve_with_one_at(self, index, v, zero_at_the_beginning=False):
        return _codegen.ExMatrix_solve_with_one_at(self, index, v, zero_at_the_beginning)

    def find_eigen_values_sym(self):
        return _codegen.ExMatrix_find_eigen_values_sym(self)

    def find_eigen_vectors_sym(self, eigen_values):
        return _codegen.ExMatrix_find_eigen_vectors_sym(self, eigen_values)

    def find_eigen_vectors_sym_bis(self):
        return _codegen.ExMatrix_find_eigen_vectors_sym_bis(self)

    def row(self, c):
        return _codegen.ExMatrix_row(self, c)

    def col(self, c):
        return _codegen.ExMatrix_col(self, c)

    def diag(self):
        return _codegen.ExMatrix_diag(self)

    def without_col(self, col):
        return _codegen.ExMatrix_without_col(self, col)

    def without_row(self, row):
        return _codegen.ExMatrix_without_row(self, row)

    def inverse(self):
        return _codegen.ExMatrix_inverse(self)

    def add_col(self, v):
        return _codegen.ExMatrix_add_col(self, v)

    def add_row(self, v):
        return _codegen.ExMatrix_add_row(self, v)

    def __getitem__(self, i):
        return _codegen.ExMatrix___getitem__(self, i)

    def __setitem__(self, *args):
        return _codegen.ExMatrix___setitem__(self, *args)

    def __add__(self, *args):
        return _codegen.ExMatrix___add__(self, *args)

    def __radd__(self, other):
        return _codegen.ExMatrix___radd__(self, other)

    def __sub__(self, *args):
        return _codegen.ExMatrix___sub__(self, *args)

    def __rsub__(self, other):
        return _codegen.ExMatrix___rsub__(self, other)

    def __mul__(self, *args):
        return _codegen.ExMatrix___mul__(self, *args)

    def __rmul__(self, *args):
        return _codegen.ExMatrix___rmul__(self, *args)

    def __div__(self, *args):
        return _codegen.ExMatrix___div__(self, *args)

    def __rdiv__(self, other):
        return _codegen.ExMatrix___rdiv__(self, other)

    def __pow__(self, *args):
        return _codegen.ExMatrix___pow__(self, *args)

    def __rpow__(self, other):
        return _codegen.ExMatrix___rpow__(self, other)

    def __neg__(self, *args):
        return _codegen.ExMatrix___neg__(self, *args)

    def __abs__(self):
        return _codegen.ExMatrix___abs__(self)

    def __repr__(self):
        return _codegen.ExMatrix___repr__(self)

    def __str__(self):
        return _codegen.ExMatrix___str__(self)

    def subs(self, *args):
        return _codegen.ExMatrix_subs(self, *args)
    __swig_destroy__ = _codegen.delete_ExMatrix
    __del__ = lambda self: None
ExMatrix_swigregister = _codegen.ExMatrix_swigregister
ExMatrix_swigregister(ExMatrix)


def abs(*args):
    return _codegen.abs(*args)
abs = _codegen.abs

def heavyside(*args):
    return _codegen.heavyside(*args)
heavyside = _codegen.heavyside

def heavyside_if(*args):
    return _codegen.heavyside_if(*args)
heavyside_if = _codegen.heavyside_if

def heaviside(*args):
    return _codegen.heaviside(*args)
heaviside = _codegen.heaviside

def heaviside_if(*args):
    return _codegen.heaviside_if(*args)
heaviside_if = _codegen.heaviside_if

def eqz(*args):
    return _codegen.eqz(*args)
eqz = _codegen.eqz

def sin(*args):
    return _codegen.sin(*args)
sin = _codegen.sin

def cos(*args):
    return _codegen.cos(*args)
cos = _codegen.cos

def sgn(*args):
    return _codegen.sgn(*args)
sgn = _codegen.sgn

def tan(*args):
    return _codegen.tan(*args)
tan = _codegen.tan

def log(*args):
    return _codegen.log(*args)
log = _codegen.log

def neg(*args):
    return _codegen.neg(*args)
neg = _codegen.neg

def asin(*args):
    return _codegen.asin(*args)
asin = _codegen.asin

def acos(*args):
    return _codegen.acos(*args)
acos = _codegen.acos

def atan(*args):
    return _codegen.atan(*args)
atan = _codegen.atan

def pow(*args):
    return _codegen.pow(*args)
pow = _codegen.pow

def max(*args):
    return _codegen.max(*args)
max = _codegen.max

def dot(*args):
    return _codegen.dot(*args)
dot = _codegen.dot
class Write_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Write_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Write_code, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _codegen.new_Write_code(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    Declare = _codegen.Write_code_Declare
    Set = _codegen.Write_code_Set
    Add = _codegen.Write_code_Add
    Sub = _codegen.Write_code_Sub
    Return = _codegen.Write_code_Return

    def node_count(self):
        return _codegen.Write_code_node_count(self)

    def to_string(self):
        return _codegen.Write_code_to_string(self)

    def to_asm(self, *args):
        return _codegen.Write_code_to_asm(self, *args)

    def asm_caller(self, asm_function_name):
        return _codegen.Write_code_asm_caller(self, asm_function_name)

    def display_graphviz(self):
        return _codegen.Write_code_display_graphviz(self)

    def add(self, *args):
        return _codegen.Write_code_add(self, *args)
    __swig_destroy__ = _codegen.delete_Write_code
    __del__ = lambda self: None
Write_code_swigregister = _codegen.Write_code_swigregister
Write_code_swigregister(Write_code)

# This file is compatible with both classic and new-style classes.


